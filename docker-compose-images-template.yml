services:
##-------------- kafka infrastructure -------------------
## zookeeper
#  zookeeper-server:
#    image: zookeeper:3.4.9
#    container_name: zookeeper-server
#    ports:
#      - "2181:2181"
#    networks:
#      - bank-account-apis
#    healthcheck:
#      test: nc -z localhost 2181 || exit -1
#      interval: 10s
#      timeout: 5s
#      retries: 3
#      start_period: 10s
#    restart: no
#
#  #kafka brokers
#  kafka-server1:
#    image: obsidiandynamics/kafka
#    container_name: kafka-server1
#    networks:
#      - bank-account-apis
#    ports:
#      - "9092:9092"
#      - "19092:19092"
#    environment:
#      KAFKA_BROKER_ID: 0
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper-server:2181
#      ALLOW_PLAINTEXT_LISTENER: yes
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_LISTENERS: PLAINTEXT://:19092,PLAINTEXT_HOST://0.0.0.0:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server1:19092,PLAINTEXT_HOST://localhost:9092
#    depends_on:
#      zookeeper-server:
#        condition: service_healthy
#    healthcheck:
#      test: nc -z localhost 19092 || exit -1
#      start_period: 15s
#      interval: 5s
#      timeout: 10s
#      retries: 10
#    restart: always
#
#  kafka-server2:
#    image: obsidiandynamics/kafka
#    container_name: kafka-server2
#    networks:
#      - bank-account-apis
#    ports:
#      - "9093:9093"
#      - "29092:29092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper-server:2181
#      ALLOW_PLAINTEXT_LISTENER: yes
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://0.0.0.0:9093
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-server2:29092,PLAINTEXT_HOST://localhost:9093
#    depends_on:
#      zookeeper-server:
#        condition: service_healthy
#    healthcheck:
#      test: nc -z localhost 29092 || exit -1
#      start_period: 15s
#      interval: 5s
#      timeout: 10s
#      retries: 10
#    restart: no
#
#  # schema registry for avro serialization
#  schema-registry-service:
#    image: confluentinc/cp-schema-registry:5.4.0
#    container_name: schema-registry-service
#    depends_on:
#      kafka-server1:
#        condition: service_healthy
#      kafka-server2:
#        condition: service_healthy
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry-service
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-server1:19092,kafka-server2:29092
#    networks:
#      - bank-account-apis
#    restart: no
#    # UI for kafka
#  kafka-UI:
#    container_name: kafka-UI
#    image: provectuslabs/kafka-ui:latest
#    ports:
#      - "8080:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: kafka-cluster1
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-server1:19092
#      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
#      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry-service:8081
#      KAFKA_CLUSTERS_1_NAME: kafka-cluster2
#      KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: kafka-server2:29092
#      KAFKA_CLUSTERS_1_METRICS_PORT: 9998
#      KAFKA_CLUSTERS_1_SCHEMAREGISTRY: http://schema-registry-service:8081
#      DYNAMIC_CONFIG_ENABLED: 'true'
#    depends_on:
#      kafka-server1:
#        condition: service_healthy
#      kafka-server2:
#        condition: service_healthy
#    networks:
#      - bank-account-apis
#    restart: no
#
#  # ---------------- transverse microservices---------------------
#  exalt-microservices-configuration-server:
#    image: placidenduwayo1/exalt-microservices-configuration-server:1.0.0
#    container_name: exalt-microservices-configuration-server
#    build:
#      context: ./exalt-backend/utils-microservices/exalt-microservices-configuration-server
#      dockerfile: Dockerfile
#    ports:
#      - "8100:8100"
#    networks:
#      - bank-account-apis
#    healthcheck:
#      test: [ "CMD", "curl", "-I", "http://exalt-microservices-configuration-server:8100" ]
#      interval: 15s
#      timeout: 10s
#      retries: 3
#      start_period: 40s
#    restart: no
#
#  exalt-microservices-registration-server:
#    image: placidenduwayo1/exalt-microservices-registration-server:1.0.0
#    container_name: exalt-microservices-registration-server
#    build:
#      context: ./exalt-backend/utils-microservices/exalt-microservices-registration-server
#      dockerfile: Dockerfile
#    ports:
#      - "8761:8761"
#    networks:
#      - bank-account-apis
#    healthcheck:
#      test: [ "CMD", "curl", "-I", "http://exalt-microservices-registration-server:8761" ]
#      interval: 15s
#      timeout: 10s
#      retries: 3
#      start_period: 40s
#    depends_on:
#      exalt-microservices-configuration-server:
#        condition: service_healthy
#    restart: no
#
#  exalt-gateway-service-proxy:
#    image: placidenduwayo1/exalt-gateway-service-proxy:1.0.0
#    container_name: exalt-gateway-service-proxy
#    build:
#      context: ./exalt-backend/utils-microservices/exalt-gateway-service-proxy
#      dockerfile: Dockerfile
#    ports:
#      - "8101:8101"
#    depends_on:
#      exalt-microservices-registration-server:
#        condition: service_healthy
#    networks:
#      - bank-account-apis
#    restart: no
#
#  ## spring security microservice
#  exalt-business-ms-spring-security-aouth2-res-server:
#    image: placidenduwayo1/exalt-business-ms-spring-security-aouth2-res-server:1.0.0
#    container_name: exalt-business-ms-spring-security-aouth2-res-server
#    build:
#      context: ./exalt-backend/security-microservice/exalt-business-ms-spring-security-aouth2-resource-server
#      dockerfile: Dockerfile
#    ports:
#      - 8102:8102
#    depends_on:
#      exalt-microservices-registration-server:
#        condition: service_healthy
#      bs-ms-database:
#        condition: service_healthy
#    networks:
#      - bank-account-apis
#    restart: no
#
## business microservices: customer, bank-account, operation
#  exalt-business-microservice-customer:
#    image: placidenduwayo1/exalt-business-microservice-customer:1.0.0
#    container_name: exalt-business-microservice-customer
#    build:
#      context: ./exalt-backend/business-microservices/exalt-business-microservice-customer
#      dockerfile: Dockerfile
#    ports:
#      - 8103:8103
#    depends_on:
#      exalt-microservices-registration-server:
#        condition: service_healthy
#      bs-ms-database:
#        condition: service_healthy
#      kafka-server1:
#        condition: service_healthy
#      kafka-server2:
#        condition: service_healthy
#    networks:
#      - bank-account-apis
#    restart: no
#
#  exalt-business-microservice-bank-account:
#    image: placidenduwayo1/exalt-business-microservice-bank-account:1.0.0
#    container_name: exalt-business-microservice-bank-account
#    build:
#      context: ./exalt-backend/business-microservices/exalt-business-microservice-bankaccount
#      dockerfile: Dockerfile
#    ports:
#      - 8104:8104
#    depends_on:
#      exalt-microservices-registration-server:
#        condition: service_healthy
#      bs-ms-database:
#        condition: service_healthy
#      kafka-server1:
#        condition: service_healthy
#      kafka-server2:
#        condition: service_healthy
#    networks:
#      - bank-account-apis
#    restart: no
#
#  exalt-business-microservice-operation:
#    image: placidenduwayo1/exalt-business-microservice-operation:1.0.0
#    container_name: exalt-business-microservice-operation
#    build:
#      context: ./exalt-backend/business-microservices/exalt-business-microservice-operation
#      dockerfile: Dockerfile
#    ports:
#      - 8105:8105
#    depends_on:
#      exalt-microservices-registration-server:
#        condition: service_healthy
#      bs-ms-database:
#        condition: service_healthy
#      kafka-server1:
#        condition: service_healthy
#      kafka-server2:
#        condition: service_healthy
#    networks:
#      - bank-account-apis
#    restart: no
#
#  # frontend angular application
#  exalt-bank-account-angular-app:
#    image: placidenduwayo1/exalt-bank-account-angular-app:1.0.0
#    container_name: exalt-bank-account-angular-app
#    build:
#       context: ./exalt-frontend
#       dockerfile: Dockerfile
#    ports:
#      - "4200:80"
#    networks:
#      - bank-account-apis
#    restart: no

networks:
  bank-account-apis:
volumes:
  psqldata: